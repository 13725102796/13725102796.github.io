<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Http版本区别与用户认证</title>
      <link href="/2018/04/12/Http-Description/"/>
      <url>/2018/04/12/Http-Description/</url>
      
        <content type="html"><![CDATA[<h1 id="Http版本区别与用户认证"><a href="#Http版本区别与用户认证" class="headerlink" title="Http版本区别与用户认证"></a><a href="">Http版本区别与用户认证</a></h1><p>HTTP协议(HyperTextTransferProtocol超文本传输协议)基于TCP&#x2F;IP通信协议来传递数据</p><h1 id="内容摘要："><a href="#内容摘要：" class="headerlink" title="内容摘要："></a>内容摘要：</h1><ul><li>Http版本</li><li>Session Cookie</li><li>Token</li><li>单点登陆</li><li>浏览器的缓存机制</li></ul><h2 id="Http版本"><a href="#Http版本" class="headerlink" title="Http版本"></a><strong>Http版本</strong></h2><h3 id="HTTP-x2F-1-0"><a href="#HTTP-x2F-1-0" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><h4 id="每次请求都会打开一个新的TCP链接，收到响应后立即断开"><a href="#每次请求都会打开一个新的TCP链接，收到响应后立即断开" class="headerlink" title="每次请求都会打开一个新的TCP链接，收到响应后立即断开"></a>每次请求都会打开一个新的TCP链接，收到响应后立即断开</h4><h3 id="HTTP-x2F-1-1（增加了缓存控制策略）"><a href="#HTTP-x2F-1-1（增加了缓存控制策略）" class="headerlink" title="HTTP&#x2F;1.1（增加了缓存控制策略）"></a>HTTP&#x2F;1.1（增加了缓存控制策略）</h3><h4 id="1-0主要用Last-Modified和Expires做缓存判断，1-1引入了更多，如-Etag-Cache-Control-keep-alive"><a href="#1-0主要用Last-Modified和Expires做缓存判断，1-1引入了更多，如-Etag-Cache-Control-keep-alive" class="headerlink" title="1.0主要用Last-Modified和Expires做缓存判断，1.1引入了更多，如:Etag Cache-Control keep-alive"></a>1.0主要用Last-Modified和Expires做缓存判断，1.1引入了更多，如:Etag Cache-Control keep-alive</h4><h4 id="1-1默认开启持久连接（同一个TCP连接发送和接受多个http请求-x2F-应答），1-0需要手动开启connection-true"><a href="#1-1默认开启持久连接（同一个TCP连接发送和接受多个http请求-x2F-应答），1-0需要手动开启connection-true" class="headerlink" title="1.1默认开启持久连接（同一个TCP连接发送和接受多个http请求&#x2F;应答），1.0需要手动开启connection:true"></a>1.1默认开启持久连接（同一个TCP连接发送和接受多个http请求&#x2F;应答），1.0需要手动开启connection:true</h4><h4 id="http-pipeline-管道化-，允许在持久连接上可选地使用请求管道。在响应到达之前，可以将多条请求放入队列。当第一条请求通过网络流向服务器时，第二、第三条请求也可以开始发送。在高时延网络条件下，可以减低网络的环回时间提高性能"><a href="#http-pipeline-管道化-，允许在持久连接上可选地使用请求管道。在响应到达之前，可以将多条请求放入队列。当第一条请求通过网络流向服务器时，第二、第三条请求也可以开始发送。在高时延网络条件下，可以减低网络的环回时间提高性能" class="headerlink" title="http pipeline(管道化)，允许在持久连接上可选地使用请求管道。在响应到达之前，可以将多条请求放入队列。当第一条请求通过网络流向服务器时，第二、第三条请求也可以开始发送。在高时延网络条件下，可以减低网络的环回时间提高性能"></a>http pipeline(管道化)，允许在持久连接上可选地使用请求管道。在响应到达之前，可以将多条请求放入队列。当第一条请求通过网络流向服务器时，第二、第三条请求也可以开始发送。在高时延网络条件下，可以减低网络的环回时间提高性能</h4><h4 id="致命缺点-目前大部分浏览器和Web服务器，都关闭了管道化，采用非管道化模式"><a href="#致命缺点-目前大部分浏览器和Web服务器，都关闭了管道化，采用非管道化模式" class="headerlink" title="致命缺点(目前大部分浏览器和Web服务器，都关闭了管道化，采用非管道化模式)"></a>致命缺点(目前大部分浏览器和Web服务器，都关闭了管道化，采用非管道化模式)</h4><h4 id="造成队头阻塞，前一个响应未及时返回，后面的响应会被阻塞"><a href="#造成队头阻塞，前一个响应未及时返回，后面的响应会被阻塞" class="headerlink" title="造成队头阻塞，前一个响应未及时返回，后面的响应会被阻塞"></a><strong>造成队头阻塞，前一个响应未及时返回，后面的响应会被阻塞</strong></h4><h4 id="非管道化-完全串行执行，后一个请求必须在前一个响应之后发送，阻塞发生在客户端，http请求阻塞"><a href="#非管道化-完全串行执行，后一个请求必须在前一个响应之后发送，阻塞发生在客户端，http请求阻塞" class="headerlink" title="非管道化:完全串行执行，后一个请求必须在前一个响应之后发送，阻塞发生在客户端，http请求阻塞"></a>非管道化:完全串行执行，后一个请求必须在前一个响应之后发送，阻塞发生在客户端，http请求阻塞</h4><h4 id="管道化-请求可以并行发出，但响应必须串行返回。后一个响应必须在前一个响应之后。因没有序号表明顺序，只能串行接受。阻塞发生在服务端，http响应阻塞"><a href="#管道化-请求可以并行发出，但响应必须串行返回。后一个响应必须在前一个响应之后。因没有序号表明顺序，只能串行接受。阻塞发生在服务端，http响应阻塞" class="headerlink" title="管道化:请求可以并行发出，但响应必须串行返回。后一个响应必须在前一个响应之后。因没有序号表明顺序，只能串行接受。阻塞发生在服务端，http响应阻塞"></a>管道化:请求可以并行发出，但响应必须串行返回。后一个响应必须在前一个响应之后。因没有序号表明顺序，只能串行接受。阻塞发生在服务端，http响应阻塞</h4><h4 id="管道化的限制。只有幂等的请求比如-GET、HEAD-才能使用-pipelining"><a href="#管道化的限制。只有幂等的请求比如-GET、HEAD-才能使用-pipelining" class="headerlink" title="管道化的限制。只有幂等的请求比如 GET、HEAD 才能使用 pipelining"></a>管道化的限制。只有幂等的请求比如 GET、HEAD 才能使用 pipelining</h4><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a><strong>解决:</strong></h3><h4 id="并发TCP连接-浏览器一个域名采用6-8个TCP链接，并发卜请求-一般中小型网站基本用不上，一个页面最多就2-3个接口"><a href="#并发TCP连接-浏览器一个域名采用6-8个TCP链接，并发卜请求-一般中小型网站基本用不上，一个页面最多就2-3个接口" class="headerlink" title="并发TCP连接(浏览器一个域名采用6-8个TCP链接，并发卜请求) 一般中小型网站基本用不上，一个页面最多就2-3个接口"></a>并发TCP连接(浏览器一个域名采用6-8个TCP链接，并发卜请求) 一般中小型网站基本用不上，一个页面最多就2-3个接口</h4><h4 id="域名分片-多个域名，可以建立更多的TCP链接，从而提高LTT请求的并发"><a href="#域名分片-多个域名，可以建立更多的TCP链接，从而提高LTT请求的并发" class="headerlink" title="域名分片(多个域名，可以建立更多的TCP链接，从而提高LTT请求的并发)"></a>域名分片(多个域名，可以建立更多的TCP链接，从而提高LTT请求的并发)</h4><h3 id="Http2-0-（引入帧和流）"><a href="#Http2-0-（引入帧和流）" class="headerlink" title="Http2.0 （引入帧和流）"></a>Http2.0 （引入帧和流）</h3><h4 id="新的二进制格式。-1-x基于文本"><a href="#新的二进制格式。-1-x基于文本" class="headerlink" title="新的二进制格式。 1.x基于文本"></a>新的二进制格式。 1.x基于文本</h4><h4 id="2-0方式-多路复用特性-将多个请求复用同一个tcp通道中，通过二进制分帧并且给每个帧打上流的-ID-去避免依次响应的问题，对方接收到帧之后根据-ID-拼接出流，这样就可以做到乱序响应从而避免请求时的队首阻塞问题"><a href="#2-0方式-多路复用特性-将多个请求复用同一个tcp通道中，通过二进制分帧并且给每个帧打上流的-ID-去避免依次响应的问题，对方接收到帧之后根据-ID-拼接出流，这样就可以做到乱序响应从而避免请求时的队首阻塞问题" class="headerlink" title="2.0方式(多路复用特性) 将多个请求复用同一个tcp通道中，通过二进制分帧并且给每个帧打上流的 ID 去避免依次响应的问题，对方接收到帧之后根据 ID 拼接出流，这样就可以做到乱序响应从而避免请求时的队首阻塞问题"></a>2.0方式(多路复用特性) 将多个请求复用同一个tcp通道中，通过二进制分帧并且给每个帧打上流的 ID 去避免依次响应的问题，对方接收到帧之后根据 ID 拼接出流，这样就可以做到乱序响应从而避免请求时的队首阻塞问题</h4><h4 id="头部压缩-使用encoder压缩"><a href="#头部压缩-使用encoder压缩" class="headerlink" title="头部压缩 使用encoder压缩"></a>头部压缩 使用encoder压缩</h4><h4 id="服务端推送，把客户端index-html需要的资源推送到浏览器并存在缓存中，等index加载时直接会优先读取缓存，而不用向服务器发起请求了"><a href="#服务端推送，把客户端index-html需要的资源推送到浏览器并存在缓存中，等index加载时直接会优先读取缓存，而不用向服务器发起请求了" class="headerlink" title="服务端推送，把客户端index.html需要的资源推送到浏览器并存在缓存中，等index加载时直接会优先读取缓存，而不用向服务器发起请求了"></a>服务端推送，把客户端index.html需要的资源推送到浏览器并存在缓存中，等index加载时直接会优先读取缓存，而不用向服务器发起请求了</h4><h4 id="缺陷：-为了向下兼容，服务端需要确认客户端是http1-x还是2-0，多做了一次TLS链接"><a href="#缺陷：-为了向下兼容，服务端需要确认客户端是http1-x还是2-0，多做了一次TLS链接" class="headerlink" title="缺陷： 为了向下兼容，服务端需要确认客户端是http1.x还是2.0，多做了一次TLS链接"></a><strong>缺陷：</strong> 为了向下兼容，服务端需要确认客户端是http1.x还是2.0，多做了一次TLS链接</h4><h4 id="多个请求是在同一个-TCP-管道中，这样当-HTTP-2-0-出现丢包时，整个-TCP-都要开始等待重传，那么就会阻塞该-TCP。连接中的所有请求。"><a href="#多个请求是在同一个-TCP-管道中，这样当-HTTP-2-0-出现丢包时，整个-TCP-都要开始等待重传，那么就会阻塞该-TCP。连接中的所有请求。" class="headerlink" title="多个请求是在同一个 TCP 管道中，这样当 HTTP 2.0 出现丢包时，整个 TCP 都要开始等待重传，那么就会阻塞该 TCP。连接中的所有请求。"></a>多个请求是在同一个 TCP 管道中，这样当 HTTP 2.0 出现丢包时，整个 TCP 都要开始等待重传，那么就会阻塞该 TCP。连接中的所有请求。</h4><h2 id="Session-Cookie"><a href="#Session-Cookie" class="headerlink" title="Session Cookie"></a><strong>Session Cookie</strong></h2><h4 id="Session-是存储在服务器端的文件里面，借助请求的响应在cookie上携带sessionId，服务器存在有一个sessionId与userId的映射表"><a href="#Session-是存储在服务器端的文件里面，借助请求的响应在cookie上携带sessionId，服务器存在有一个sessionId与userId的映射表" class="headerlink" title="Session 是存储在服务器端的文件里面，借助请求的响应在cookie上携带sessionId，服务器存在有一个sessionId与userId的映射表"></a>Session 是存储在服务器端的文件里面，借助请求的响应在cookie上携带sessionId，服务器存在有一个sessionId与userId的映射表</h4><h4 id="在多机部署的情况下，可用redies做中间层，缓存session，缺点是所有请求都要去redis获取session，为保障redies高可用性，必须做集群"><a href="#在多机部署的情况下，可用redies做中间层，缓存session，缺点是所有请求都要去redis获取session，为保障redies高可用性，必须做集群" class="headerlink" title="在多机部署的情况下，可用redies做中间层，缓存session，缺点是所有请求都要去redis获取session，为保障redies高可用性，必须做集群"></a>在多机部署的情况下，可用redies做中间层，缓存session，缺点是所有请求都要去redis获取session，为保障redies高可用性，必须做集群</h4><h4 id="Cookie-在发起请求和响应请求都会携带已存在的数据往返"><a href="#Cookie-在发起请求和响应请求都会携带已存在的数据往返" class="headerlink" title="Cookie 在发起请求和响应请求都会携带已存在的数据往返"></a>Cookie 在发起请求和响应请求都会携带已存在的数据往返</h4><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a><strong>Token</strong></h2><h4 id="Token是由前端缓存在浏览器一段密文，一般通过设置请求头传递给后端，后端经过JWT去认证"><a href="#Token是由前端缓存在浏览器一段密文，一般通过设置请求头传递给后端，后端经过JWT去认证" class="headerlink" title="Token是由前端缓存在浏览器一段密文，一般通过设置请求头传递给后端，后端经过JWT去认证"></a>Token是由前端缓存在浏览器一段密文，一般通过设置请求头传递给后端，后端经过JWT去认证</h4><h2 id="单点登陆"><a href="#单点登陆" class="headerlink" title="单点登陆"></a><strong>单点登陆</strong></h2><h4 id="简称SSO，一般定义在多个应用系统中，用户只需登陆一次就可以访问所有互相信任的应用系统"><a href="#简称SSO，一般定义在多个应用系统中，用户只需登陆一次就可以访问所有互相信任的应用系统" class="headerlink" title="简称SSO，一般定义在多个应用系统中，用户只需登陆一次就可以访问所有互相信任的应用系统"></a>简称SSO，一般定义在多个应用系统中，用户只需登陆一次就可以访问所有互相信任的应用系统</h4><h4 id="一般是由登陆中间层应用去控制用户的登陆，一旦登陆成功，以后其它系统携带该用户信息访问进来时重定向并携带该用户的token返回去，再用当前应用系统验证token，向客户端响应当前用户信息"><a href="#一般是由登陆中间层应用去控制用户的登陆，一旦登陆成功，以后其它系统携带该用户信息访问进来时重定向并携带该用户的token返回去，再用当前应用系统验证token，向客户端响应当前用户信息" class="headerlink" title="一般是由登陆中间层应用去控制用户的登陆，一旦登陆成功，以后其它系统携带该用户信息访问进来时重定向并携带该用户的token返回去，再用当前应用系统验证token，向客户端响应当前用户信息"></a>一般是由登陆中间层应用去控制用户的登陆，一旦登陆成功，以后其它系统携带该用户信息访问进来时重定向并携带该用户的token返回去，再用当前应用系统验证token，向客户端响应当前用户信息</h4><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a><strong>浏览器缓存</strong></h2><h4 id="Web-缓存大致可以分为：数据库缓存、服务器端缓存（代理服务器缓存、CDN-缓存）、浏览器缓存。"><a href="#Web-缓存大致可以分为：数据库缓存、服务器端缓存（代理服务器缓存、CDN-缓存）、浏览器缓存。" class="headerlink" title="Web 缓存大致可以分为：数据库缓存、服务器端缓存（代理服务器缓存、CDN 缓存）、浏览器缓存。"></a>Web 缓存大致可以分为：数据库缓存、服务器端缓存（代理服务器缓存、CDN 缓存）、浏览器缓存。</h4><h4 id="浏览器缓存也包含很多内容：-HTTP-缓存、indexDB、cookie、localstorage-等等。这里我们只讨论-HTTP-缓存相关内容"><a href="#浏览器缓存也包含很多内容：-HTTP-缓存、indexDB、cookie、localstorage-等等。这里我们只讨论-HTTP-缓存相关内容" class="headerlink" title="浏览器缓存也包含很多内容： HTTP 缓存、indexDB、cookie、localstorage 等等。这里我们只讨论 HTTP 缓存相关内容"></a>浏览器缓存也包含很多内容： HTTP 缓存、indexDB、cookie、localstorage 等等。这里我们只讨论 HTTP 缓存相关内容</h4><h4 id="HTTP-缓存术语："><a href="#HTTP-缓存术语：" class="headerlink" title="HTTP 缓存术语："></a>HTTP 缓存术语：</h4><h4 id="缓存命中率：从缓存中得到数据的请求数与所有请求数的比率。理想状态是越高越好。"><a href="#缓存命中率：从缓存中得到数据的请求数与所有请求数的比率。理想状态是越高越好。" class="headerlink" title="* 缓存命中率：从缓存中得到数据的请求数与所有请求数的比率。理想状态是越高越好。"></a>* 缓存命中率：从缓存中得到数据的请求数与所有请求数的比率。理想状态是越高越好。</h4><h4 id="过期内容：超过设置的有效时间，被标记为“陈旧”的内容。通常过期内容不能用于回复客户端的请求，必须重新向源服务器请求新的内容或者验证缓存的内容是否仍然准备。"><a href="#过期内容：超过设置的有效时间，被标记为“陈旧”的内容。通常过期内容不能用于回复客户端的请求，必须重新向源服务器请求新的内容或者验证缓存的内容是否仍然准备。" class="headerlink" title="* 过期内容：超过设置的有效时间，被标记为“陈旧”的内容。通常过期内容不能用于回复客户端的请求，必须重新向源服务器请求新的内容或者验证缓存的内容是否仍然准备。"></a>* 过期内容：超过设置的有效时间，被标记为“陈旧”的内容。通常过期内容不能用于回复客户端的请求，必须重新向源服务器请求新的内容或者验证缓存的内容是否仍然准备。</h4><h4 id="验证：验证缓存中的过期内容是否仍然有效，验证通过的话刷新过期时间。"><a href="#验证：验证缓存中的过期内容是否仍然有效，验证通过的话刷新过期时间。" class="headerlink" title="* 验证：验证缓存中的过期内容是否仍然有效，验证通过的话刷新过期时间。"></a>* 验证：验证缓存中的过期内容是否仍然有效，验证通过的话刷新过期时间。</h4><h4 id="失效：失效就是把内容从缓存中移除。当内容发生改变时就必须移除失效的内容。"><a href="#失效：失效就是把内容从缓存中移除。当内容发生改变时就必须移除失效的内容。" class="headerlink" title="* 失效：失效就是把内容从缓存中移除。当内容发生改变时就必须移除失效的内容。"></a>* 失效：失效就是把内容从缓存中移除。当内容发生改变时就必须移除失效的内容。</h4><h4 id="浏览器缓存主要是-HTTP-协议定义的缓存机制。HTML-meta-标签，例如"><a href="#浏览器缓存主要是-HTTP-协议定义的缓存机制。HTML-meta-标签，例如" class="headerlink" title="浏览器缓存主要是 HTTP 协议定义的缓存机制。HTML meta 标签，例如"></a>浏览器缓存主要是 HTTP 协议定义的缓存机制。HTML meta 标签，例如</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;META HTTP-EQUIV=<span class="string">&quot;Pragma&quot;</span> CONTENT=<span class="string">&quot;no-store&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="含义是让浏览器不缓存当前页面。但是代理服务器不解析-HTML-内容，一般应用广泛的是用-HTTP-头信息控制缓存"><a href="#含义是让浏览器不缓存当前页面。但是代理服务器不解析-HTML-内容，一般应用广泛的是用-HTTP-头信息控制缓存" class="headerlink" title="含义是让浏览器不缓存当前页面。但是代理服务器不解析 HTML 内容，一般应用广泛的是用 HTTP 头信息控制缓存"></a>含义是让浏览器不缓存当前页面。但是代理服务器不解析 HTML 内容，一般应用广泛的是用 HTTP 头信息控制缓存</h4><h4 id="浏览器缓存分为强缓存和协商缓存，浏览器加载一个页面的简单流程如下："><a href="#浏览器缓存分为强缓存和协商缓存，浏览器加载一个页面的简单流程如下：" class="headerlink" title="浏览器缓存分为强缓存和协商缓存，浏览器加载一个页面的简单流程如下："></a>浏览器缓存分为强缓存和协商缓存，浏览器加载一个页面的简单流程如下：</h4><h4 id="1-浏览器先根据这个资源的http头信息来判断是否命中强缓存。如果命中则直接加在缓存中的资源，并不会将请求发送到服务器。（强缓存）"><a href="#1-浏览器先根据这个资源的http头信息来判断是否命中强缓存。如果命中则直接加在缓存中的资源，并不会将请求发送到服务器。（强缓存）" class="headerlink" title="1. 浏览器先根据这个资源的http头信息来判断是否命中强缓存。如果命中则直接加在缓存中的资源，并不会将请求发送到服务器。（强缓存）"></a>1. 浏览器先根据这个资源的http头信息来判断是否命中强缓存。如果命中则直接加在缓存中的资源，并不会将请求发送到服务器。（强缓存）</h4><h4 id="2-如果未命中强缓存，则浏览器会将资源加载请求发送到服务器。服务器来判断浏览器本地缓存是否失效。若可以使用，则服务器并不会返回资源信息，浏览器继续从缓存加载资源。（协商缓存）"><a href="#2-如果未命中强缓存，则浏览器会将资源加载请求发送到服务器。服务器来判断浏览器本地缓存是否失效。若可以使用，则服务器并不会返回资源信息，浏览器继续从缓存加载资源。（协商缓存）" class="headerlink" title="2. 如果未命中强缓存，则浏览器会将资源加载请求发送到服务器。服务器来判断浏览器本地缓存是否失效。若可以使用，则服务器并不会返回资源信息，浏览器继续从缓存加载资源。（协商缓存）"></a>2. 如果未命中强缓存，则浏览器会将资源加载请求发送到服务器。服务器来判断浏览器本地缓存是否失效。若可以使用，则服务器并不会返回资源信息，浏览器继续从缓存加载资源。（协商缓存）</h4><h4 id="3-如果未命中协商缓存，则服务器会将完整的资源返回给浏览器，浏览器加载新资源，并更新缓存。（新的请求）"><a href="#3-如果未命中协商缓存，则服务器会将完整的资源返回给浏览器，浏览器加载新资源，并更新缓存。（新的请求）" class="headerlink" title="3. 如果未命中协商缓存，则服务器会将完整的资源返回给浏览器，浏览器加载新资源，并更新缓存。（新的请求）"></a>3. 如果未命中协商缓存，则服务器会将完整的资源返回给浏览器，浏览器加载新资源，并更新缓存。（新的请求）</h4><h4 id="命中强缓存时，浏览器并不会将请求发送给服务器。在Chrome的开发者工具中看到http的返回码是200，但是在Size列会显示为-from-cache-。"><a href="#命中强缓存时，浏览器并不会将请求发送给服务器。在Chrome的开发者工具中看到http的返回码是200，但是在Size列会显示为-from-cache-。" class="headerlink" title="命中强缓存时，浏览器并不会将请求发送给服务器。在Chrome的开发者工具中看到http的返回码是200，但是在Size列会显示为(from cache)。"></a>命中强缓存时，浏览器并不会将请求发送给服务器。在Chrome的开发者工具中看到http的返回码是200，但是在Size列会显示为(from cache)。</h4><h4 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a><strong>疑问解答</strong></h4><h4 id="为什么我更新我更新前端资源文件，从新打开链接需要刷新一下才能生效呢？"><a href="#为什么我更新我更新前端资源文件，从新打开链接需要刷新一下才能生效呢？" class="headerlink" title="为什么我更新我更新前端资源文件，从新打开链接需要刷新一下才能生效呢？"></a>为什么我更新我更新前端资源文件，从新打开链接需要刷新一下才能生效呢？</h4><h4 id="因为这时候由于你客户端近期在你更新之前是已经访问过该链接，而且缓存过期时间还没失效，这时候命中的是强缓存，当刷新网页时，跳过强缓存，但是会检查协商缓存；浏览器会将资源加载请求发送到服务器，服务器检测到当前加载资源已更新，则将完整的资源返回给浏览器。"><a href="#因为这时候由于你客户端近期在你更新之前是已经访问过该链接，而且缓存过期时间还没失效，这时候命中的是强缓存，当刷新网页时，跳过强缓存，但是会检查协商缓存；浏览器会将资源加载请求发送到服务器，服务器检测到当前加载资源已更新，则将完整的资源返回给浏览器。" class="headerlink" title="因为这时候由于你客户端近期在你更新之前是已经访问过该链接，而且缓存过期时间还没失效，这时候命中的是强缓存，当刷新网页时，跳过强缓存，但是会检查协商缓存；浏览器会将资源加载请求发送到服务器，服务器检测到当前加载资源已更新，则将完整的资源返回给浏览器。"></a>因为这时候由于你客户端近期在你更新之前是已经访问过该链接，而且缓存过期时间还没失效，这时候命中的是强缓存，当刷新网页时，跳过强缓存，但是会检查协商缓存；浏览器会将资源加载请求发送到服务器，服务器检测到当前加载资源已更新，则将完整的资源返回给浏览器。</h4><h4 id="强制刷新页面，浏览器会直接忽略本地的缓存（有缓存也会认为本地没有缓存），在请求中加上字段：Cache-Control-no-cache（或-Pragma-no-cache），发包向服务重新拉取文件。"><a href="#强制刷新页面，浏览器会直接忽略本地的缓存（有缓存也会认为本地没有缓存），在请求中加上字段：Cache-Control-no-cache（或-Pragma-no-cache），发包向服务重新拉取文件。" class="headerlink" title="强制刷新页面，浏览器会直接忽略本地的缓存（有缓存也会认为本地没有缓存），在请求中加上字段：Cache-Control:no-cache（或 Pragma:no-cache），发包向服务重新拉取文件。"></a>强制刷新页面，浏览器会直接忽略本地的缓存（有缓存也会认为本地没有缓存），在请求中加上字段：Cache-Control:no-cache（或 Pragma:no-cache），发包向服务重新拉取文件。</h4><h4 id="Dom-Storage-存储机制"><a href="#Dom-Storage-存储机制" class="headerlink" title="Dom Storage 存储机制"></a>Dom Storage 存储机制</h4><h4 id="sessionStorage浏览器缓存（浏览器关闭则移除）-和-localStorage本地存储（不清楚则永久存在）（5M）"><a href="#sessionStorage浏览器缓存（浏览器关闭则移除）-和-localStorage本地存储（不清楚则永久存在）（5M）" class="headerlink" title="sessionStorage浏览器缓存（浏览器关闭则移除） 和 localStorage本地存储（不清楚则永久存在）（5M）"></a>sessionStorage浏览器缓存（浏览器关闭则移除） 和 localStorage本地存储（不清楚则永久存在）（5M）</h4><h4 id="应用场景：-页面意外关闭的数据恢复"><a href="#应用场景：-页面意外关闭的数据恢复" class="headerlink" title="应用场景： 页面意外关闭的数据恢复"></a>应用场景： 页面意外关闭的数据恢复</h4><h4 id="Application-Cache-机制"><a href="#Application-Cache-机制" class="headerlink" title="Application Cache 机制"></a>Application Cache 机制</h4><h4 id="浏览器在首次加载-HTML-文件时，会解析-manifest-属性，-lt-html-manifest-quot-demo-html-appcache-quot-gt-并读取-manifest-文件，获取-Section：CACHE-MANIFEST-下要缓存的文件列表，再对文件缓存。（一般游戏的应用的比较多）"><a href="#浏览器在首次加载-HTML-文件时，会解析-manifest-属性，-lt-html-manifest-quot-demo-html-appcache-quot-gt-并读取-manifest-文件，获取-Section：CACHE-MANIFEST-下要缓存的文件列表，再对文件缓存。（一般游戏的应用的比较多）" class="headerlink" title="浏览器在首次加载 HTML 文件时，会解析 manifest 属性，&lt;html manifest=&quot;demo_html.appcache&quot;&gt; 并读取 manifest 文件，获取 Section：CACHE MANIFEST 下要缓存的文件列表，再对文件缓存。（一般游戏的应用的比较多）"></a>浏览器在首次加载 HTML 文件时，会解析 manifest 属性，<code>&lt;html manifest=&quot;demo_html.appcache&quot;&gt;</code> 并读取 manifest 文件，获取 Section：CACHE MANIFEST 下要缓存的文件列表，再对文件缓存。（一般游戏的应用的比较多）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"><span class="comment"># 2012-02-21 v1.0.0</span></span><br><span class="line">/theme.css</span><br><span class="line">/logo.gif</span><br><span class="line">/main.js</span><br><span class="line"> </span><br><span class="line">NETWORK:</span><br><span class="line">login.asp</span><br><span class="line"> </span><br><span class="line">FALLBACK:</span><br><span class="line">/html/ /offline.html </span><br></pre></td></tr></table></figure><h4 id="AppCache-在首次加载生成后，也有更新机制。被缓存的文件如果要更新，需要更新-manifest-文件。因为浏览器在下次加载时，除了会默认使用缓存外，还会在后台检查-manifest-文件有没有修改（byte-by-byte-。发现有修改，就会重新获取-manifest-文件，对-Section：CACHE-MANIFEST-下文件列表检查更新。manifest-文件与缓存文件的检查更新也遵守浏览器缓存机制。"><a href="#AppCache-在首次加载生成后，也有更新机制。被缓存的文件如果要更新，需要更新-manifest-文件。因为浏览器在下次加载时，除了会默认使用缓存外，还会在后台检查-manifest-文件有没有修改（byte-by-byte-。发现有修改，就会重新获取-manifest-文件，对-Section：CACHE-MANIFEST-下文件列表检查更新。manifest-文件与缓存文件的检查更新也遵守浏览器缓存机制。" class="headerlink" title="AppCache 在首次加载生成后，也有更新机制。被缓存的文件如果要更新，需要更新 manifest 文件。因为浏览器在下次加载时，除了会默认使用缓存外，还会在后台检查 manifest 文件有没有修改（byte by byte)。发现有修改，就会重新获取 manifest 文件，对 Section：CACHE MANIFEST 下文件列表检查更新。manifest 文件与缓存文件的检查更新也遵守浏览器缓存机制。"></a>AppCache 在首次加载生成后，也有更新机制。被缓存的文件如果要更新，需要更新 manifest 文件。因为浏览器在下次加载时，除了会默认使用缓存外，还会在后台检查 manifest 文件有没有修改（byte by byte)。发现有修改，就会重新获取 manifest 文件，对 Section：CACHE MANIFEST 下文件列表检查更新。manifest 文件与缓存文件的检查更新也遵守浏览器缓存机制。</h4><h3 id="移动端-Web-加载性能（缓存）优化"><a href="#移动端-Web-加载性能（缓存）优化" class="headerlink" title="移动端 Web 加载性能（缓存）优化"></a><strong>移动端 Web 加载性能（缓存）优化</strong></h3><h4 id="通过对一些-H5页面进行调试及抓包发现，每次加载一个-H5页面，都会有较多的请求。除了-HTML-主-URL-自身的请求外，HTML外部引用的-JS、CSS、字体文件、图片都是一个独立的-HTTP-请求，每一个请求都串行的（可能有连接复用）。这么多请求串起来，再加上浏览器解析、渲染的时间，Web-整体的加载时间变得较长；请求文件越多，消耗的流量也会越多。我们可综合使用上面说到几种缓存机制，来帮助我们优化-Web-的加载性能。"><a href="#通过对一些-H5页面进行调试及抓包发现，每次加载一个-H5页面，都会有较多的请求。除了-HTML-主-URL-自身的请求外，HTML外部引用的-JS、CSS、字体文件、图片都是一个独立的-HTTP-请求，每一个请求都串行的（可能有连接复用）。这么多请求串起来，再加上浏览器解析、渲染的时间，Web-整体的加载时间变得较长；请求文件越多，消耗的流量也会越多。我们可综合使用上面说到几种缓存机制，来帮助我们优化-Web-的加载性能。" class="headerlink" title="通过对一些 H5页面进行调试及抓包发现，每次加载一个 H5页面，都会有较多的请求。除了 HTML 主 URL 自身的请求外，HTML外部引用的 JS、CSS、字体文件、图片都是一个独立的 HTTP 请求，每一个请求都串行的（可能有连接复用）。这么多请求串起来，再加上浏览器解析、渲染的时间，Web 整体的加载时间变得较长；请求文件越多，消耗的流量也会越多。我们可综合使用上面说到几种缓存机制，来帮助我们优化 Web 的加载性能。"></a>通过对一些 H5页面进行调试及抓包发现，每次加载一个 H5页面，都会有较多的请求。除了 HTML 主 URL 自身的请求外，HTML外部引用的 JS、CSS、字体文件、图片都是一个独立的 HTTP 请求，每一个请求都串行的（可能有连接复用）。这么多请求串起来，再加上浏览器解析、渲染的时间，Web 整体的加载时间变得较长；请求文件越多，消耗的流量也会越多。我们可综合使用上面说到几种缓存机制，来帮助我们优化 Web 的加载性能。</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Http Https Session Cookie Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建我的博客</title>
      <link href="/2018/04/10/First-Blog/"/>
      <url>/2018/04/10/First-Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始搭建我的博客"><a href="#从零开始搭建我的博客" class="headerlink" title="从零开始搭建我的博客"></a><a href="https://github.com/13725102796/13725102796.github.io">从零开始搭建我的博客</a></h1><h3 id="node-v16-14-0-npm-8-3-1"><a href="#node-v16-14-0-npm-8-3-1" class="headerlink" title="node v16.14.0 npm 8.3.1"></a><code>node v16.14.0</code> <code>npm 8.3.1</code></h3><h1 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h1><ul><li>GitHub创建个人仓库</li><li>安装Hexo</li><li>使用Hexo</li><li>命令简写</li></ul><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a><strong>GitHub创建个人仓库</strong></h2><h4 id="在Github创建新仓库，仓库名应该为：用户名-github-io-比如我的仓库名为13725102796-github-io"><a href="#在Github创建新仓库，仓库名应该为：用户名-github-io-比如我的仓库名为13725102796-github-io" class="headerlink" title="在Github创建新仓库，仓库名应该为：用户名.github.io 比如我的仓库名为13725102796.github.io"></a>在Github创建新仓库，仓库名应该为：<code>用户名.github.io</code> 比如我的仓库名为<code>13725102796.github.io</code></h4><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><strong>安装Hexo</strong></h2><h4 id="Hexo-是一个快速、简单、强大的博客框架。你可以用Markdown-（或其他标记语言）写帖子，Hexo-会在几秒钟内生成带有漂亮主题的静态文件。非常快捷，方便。"><a href="#Hexo-是一个快速、简单、强大的博客框架。你可以用Markdown-（或其他标记语言）写帖子，Hexo-会在几秒钟内生成带有漂亮主题的静态文件。非常快捷，方便。" class="headerlink" title="Hexo 是一个快速、简单、强大的博客框架。你可以用Markdown （或其他标记语言）写帖子，Hexo 会在几秒钟内生成带有漂亮主题的静态文件。非常快捷，方便。"></a>Hexo 是一个快速、简单、强大的博客框架。你可以用Markdown （或其他标记语言）写帖子，Hexo 会在几秒钟内生成带有漂亮主题的静态文件。非常快捷，方便。</h4><h4 id="我们先来全局安装-Hexo-初始化项目，在切进对应目录："><a href="#我们先来全局安装-Hexo-初始化项目，在切进对应目录：" class="headerlink" title="我们先来全局安装 Hexo,初始化项目，在切进对应目录："></a>我们先来全局安装 Hexo,初始化项目，在切进对应目录：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init Blog</span><br><span class="line">$ <span class="built_in">cd</span> Blog</span><br></pre></td></tr></table></figure><h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a><strong>使用Hexo</strong></h2><h4 id="创建一篇文章-hexo-n-quot-First-Blog-quot-，对应会在-x2F-sources-x2F-posts-x2F-文件下面生成一个First-Blog-md-文件，在里面编辑好博文"><a href="#创建一篇文章-hexo-n-quot-First-Blog-quot-，对应会在-x2F-sources-x2F-posts-x2F-文件下面生成一个First-Blog-md-文件，在里面编辑好博文" class="headerlink" title="创建一篇文章 hexo n &quot;First Blog&quot;，对应会在&#x2F;sources&#x2F;_posts&#x2F;文件下面生成一个First-Blog.md 文件，在里面编辑好博文"></a>创建一篇文章<code> hexo n &quot;First Blog&quot;</code>，对应会在&#x2F;sources&#x2F;_posts&#x2F;文件下面生成一个<code>First-Blog.md</code> 文件，在里面编辑好博文</h4><h4 id="修改根目录-config-yml配置文件"><a href="#修改根目录-config-yml配置文件" class="headerlink" title="修改根目录_config.yml配置文件"></a><a href="">修改根目录_config.yml配置文件</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/13725102796/13725102796.github.io </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="执行-清除缓存并重新生成静态资源并本地运行"><a href="#执行-清除缓存并重新生成静态资源并本地运行" class="headerlink" title="执行 清除缓存并重新生成静态资源并本地运行"></a>执行 清除缓存并重新生成静态资源并本地运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h4 id="发布到Github上-，需要安装一个发布github的插件，再发布"><a href="#发布到Github上-，需要安装一个发布github的插件，再发布" class="headerlink" title="发布到Github上 ，需要安装一个发布github的插件，再发布"></a>发布到Github上 ，需要安装一个发布github的插件，再发布</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h4 id="通过https-13725102796-github-io-即可访问"><a href="#通过https-13725102796-github-io-即可访问" class="headerlink" title="通过https://13725102796.github.io 即可访问"></a>通过<a href="https://13725102796.github.io/">https://13725102796.github.io</a> 即可访问</h4><h2 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a><strong>命令简写</strong></h2><h4 id="新建一篇文章-hexo-n-quot-我的博客-quot-x3D-x3D-hexo-new-quot-我的博客-quot"><a href="#新建一篇文章-hexo-n-quot-我的博客-quot-x3D-x3D-hexo-new-quot-我的博客-quot" class="headerlink" title="新建一篇文章 hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot;"></a>新建一篇文章 <code>hexo n &quot;我的博客&quot;</code> &#x3D;&#x3D; <code>hexo new &quot;我的博客&quot;</code></h4><h4 id="生成静态资源文件-hexo-g-x3D-x3D-hexo-generate"><a href="#生成静态资源文件-hexo-g-x3D-x3D-hexo-generate" class="headerlink" title="生成静态资源文件 hexo g &#x3D;&#x3D; hexo generate "></a>生成静态资源文件 <code>hexo g</code> &#x3D;&#x3D; <code>hexo generate </code></h4><h4 id="启动本地服务预览-hexo-s-x3D-x3D-hexo-server"><a href="#启动本地服务预览-hexo-s-x3D-x3D-hexo-server" class="headerlink" title="启动本地服务预览 hexo s &#x3D;&#x3D; hexo server "></a>启动本地服务预览 <code>hexo s</code> &#x3D;&#x3D; <code>hexo server </code></h4><h4 id="部署到线上-hexo-d-x3D-x3D-hexo-deploy"><a href="#部署到线上-hexo-d-x3D-x3D-hexo-deploy" class="headerlink" title="部署到线上 hexo d &#x3D;&#x3D; hexo deploy "></a>部署到线上 <code>hexo d</code> &#x3D;&#x3D; <code>hexo deploy </code></h4>]]></content>
      
      
      
        <tags>
            
            <tag> Next Hexo Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/09/hello-world/"/>
      <url>/2018/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Next Hexo Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
